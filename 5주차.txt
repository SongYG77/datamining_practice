데이터마이닝 5주차
Matplotlib
그림 그리는(그래프 등등) 모듈

스타일 설정하기
plt.style.use('스타일 이름')

show()
plt.show() 하면 현재 활성화된 그림을 보여줌

ipython의 경우 
%matplotlib inline
을 첫줄에 쓰면 show없이 바로 나온다
inline은 그림만 보여주고 만약 notebook이라고 쓰면 그림만 따로 활용이 가능한 형태

np.linspace(0,10,100)면 1~10까지를 100개로 나누겠다는 뜻이다.
즉 0부터 10까지 100개의 점으로 표현하겟다는 뜻이다.

fig.savefig('파일이름') 하면 그림파일 저장


인터페이스 두개
MATLAB-style 스타일의 상태 기반
인터페이스 기반

matplotlib는 사용자의 파이썬 대안으로 제작 
plt.subplot(2,2,1)하면 처음은 행 두번째는 열의 개수로 여러개의 그림을 표시

객체 지향으로 사용시
fig, ax = plt.subplots(2)
ax[0].plot(~)
ax[1].plot(~)
이런식으로도 사용 가능


간단한 삼점도
plot(x,y,' ')에서 저 작은따움표가 삼점도.
plt.scatter(x, y, marker= 'o') 
이렇게 scatter라는 함수 사용도 가능
스케터가 활용도가 더 많다.

색상과 선 표시 모양은 한번에 다 적을 수 있다.
'-og' 실선으로 점 모양 초록색.

투명도 조절 alpha
scatter로 alpha값으로 투명도 조절 가능

plt.colorbar()로 
작은값 큰 값에 대한 색상을 줄 수 있다.,

plt.xlim(a,b)
plt.ylim(a,b)
a부터 b까지 x,y축의 범위를 지정할 수 있다.
이것을한번에
plt.axis([xmin, xmax, ymin, ymax])로 사용 가능

aixs안에 
tight하면 적절하게 맞춤
equal 비율을 맞춤

title()과 xlabel() ylabel()로 이름을 지정할 수 잇다.

plot안에 label = ' ' 로 옵션을 주면 각 그림이 뭘 의미하는지 이름 붙이고
plt.legend()
을 쓰면 그 이름이 그림에서 보이게 된다.

axes로 쓸 경우
plt.xlabel() → ax.set_xlabel()
plt.ylabel() → ax.set_ylabel()
plt.xlim() → ax.set_xlim()
plt.ylim() → ax.set_ylim()
plt.title() → ax.set_title()
객체 지향의 방식


다중 서브 플롯
plt.axes : 직접 만든 서브플롯
네개의 목록을 인수로 취할 수 있다.
각각 서브플롯의 위치를 지정할 수 있다.

예를 들어 x와 y의 위치를 0.65설정(그림 너비의 65퍼와 높이 65퍼에서 시작
x와 y의 범위를 0.2로 설정( 축의 크기는 그림너비와 높이의 각 20퍼가 된다.
ax1= plt.axes()
ax2 = plt.axes([0.65,0.65,0.2,0.2])

subplot_adjust(hspace = a, wsapce = b)
subplot에 세로 가로에 간격을 주는 것

plt.GridSpec()
규칙적인 배치를 넘어 여러 행과 열로 확장할 경우

grid = plt.GridSpec(2, 3, wspace=0.2, hspace=0.3)
(2,3) 만큼의 크기(즉 6개의 영역)의 plot이 생기고
plt.subplot(grid[i,j]) 로 영역을 지정하여 서브플롯 생성을 가능하다.

i와j부분은 배열처럼 슬라이스로 불러오는 것도 가능

plt.hist(x)
히스토그램으로 표현하는 것이다.
특정 구간의 개수 즉 분포도를 측정가능
데이터세트를 보기 가장 좋다.

히스트 함수는 계산과 표현 모두 조정할수 있는 많은 옵션값들이 있다.

plt.hist(data, bins=30, alpha=0.5,
histtype='stepfilled', color='steelblue',edgecolor='blue')
;
색상, 선색상, 구간의 정도(bins) 투명도(알파)

그림을 그리고 싶지 않고 값을 얻고 싶을 때 
count, bin_edges = np.histogram(data, bins=5)
로 하고
count를 출력할 경우 
구간 5개의 각각의 구간의 값을 가져온다.
bin_edges는 각각의 구간이 얼마에서 얼마까진지 나온다.

2차원 히스토그램과 구간화

2차원 구간에 나누어서 히스토그램
plt.hist2d(x,y,bins = 30,cmap = 'Blues ')

육각형 구간화
plt.hexbin(x,y,bins=30)

















