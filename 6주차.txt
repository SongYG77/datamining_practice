데이터마이닝 6주차

Pandas
넘파이와 비슷
scipy numpy statsmodels scikitlearn matplotlib와 함께 사용하는 경우가 많다

numpy : 단일 산술 배열 데이터를 다루는데 특화
pandas : 표 형식의 데이터나 다양하 형태의 데이터를 다루는데 초점

사전형을 다루기 좋다(표 형식이기 때문에)

테이블 형식의 데이터를 다루기 쉽고 데이터가 테이블 형식으로 이루어진 경우가 많아 데이터 분석 시 자주 사용된다.
import pandas as pd
또는
from pandas import Series, DataFrame
이런식으로 사용도 한다.

Series 
객체를 다룰수 있는 1차원 배열같은 자료구조(벡터 형태와 비슷)
인덱스를 지정가능

DataFrame
시리즈에서 컬럼값이 존재 즉 2D데이터 구조


obj = pd.Series(리스트)
obj
하면 
인덱스 리스트값
인덱스 리스트값
이런식으로 출력이 된다.

시리즈는 value와 index 속성을 통해 얻기 가능하다.
obj.values
obj.index

색인을 지정할 수 있다.
obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])
즉 각 벨류에 인덱스 값을 지정할 수 있다

OB = obj2[['c','a','d']]
하면 c,a,d에 해당하는 부분만 가져와 OB라는 새로운 pandas 형태의 데이터를 만든다.

import numpy as np
print(obj2[obj2 > 0])
print(obj2 * 2)
이렇게 쓰는 것도 가능하다.

obj3 = pd.Series(사전형)
하면 사전의 키가 인덱스로 가고 값이 벨류로 지정된다.

states = ['California', 'Ohio', 'Oregon', 'Texas']
obj4 = pd.Series(sdata, index=states)
하면 sdata에서 인덱스가 states에 있는 것들을 가져와라. 만약 California가 sdata에 없다면 California의 벨류는 nan이 된다.

pd.notnull(데이터)하면 값이 있는지 없는지 판단 T/F형태로 나옴, 있으면 참 없으면 거짓
pd.isnull은 값이 없으면 참 있으면 거짓


만약 같은 인덱스를 가진 두 판다스를 더하면
같은 인덱스끼리의 벨류는 더해진다.
만약 한쪽에 없는 인덱스라면 nan이 벨류로 가져진다.

obj.name = ' '
obj.index.name = ' '
로 테이블의 이름이나 인덱스가 의미하는 이름을 지정해 줄 수 있다.

이후 만들어 주고 
obj.index = 리스트
로 인덱스 값을 바꿔줄 수 있다.


DataFrame
스프레드 시트형식이다.
여러개의 데이터 형식을 가질 수 있다.
시리즈를 객체로 담고 있는 파이썬의 사전으로 생각할 수 있다.
2차원 이미지만 계층적으로 표현 가능
즉 2차원 배열처럼 쓸 수 있다.

data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],
'year': [2000, 2001, 2002, 2001, 2002, 2003],
'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}

frame = pd.DataFrame(data)
frame
출력
: state year pop
0 Ohio 2000 1.5
1 Ohio 2001 1.7
2 Ohio 2002 3.6
3 Nevada 2001 2.4
4 Nevada 2002 2.9
5 Nevada 2003 3.2

이런식이다.

frame.head()는 앞의 다섯개만 출력
frame.tail()은 뒤 5개

pd.DataFrame(data, columns=['year', 'state', 'pop'])
이렇게 컬럼의 순서를 바꿀 수 있다.


시리즈와 마찬가지로 사전에 없는 값을 넘기면 nan값이 저장된다.
index지정도 시리즈와 같다.

행의 위치나 loc속성을 이용해 행의 값을 가져올 수 있다.
frame.loc[인덱스]

열을 가져오는 건
frame[열]
또는
frame.열

frame[열] = 단일값
이경우는 열의 모든 값이 단일 값으로 변경
frame[열] = 값들
만약 값이 열의 개수와 동일하다면 차례대로 채워지게 된다

 frame[열] = 시리즈

하면 인덱스가 같은 부분은 시리즈의 벨류로 변경이 되고 나머지는 nan


del을 이용해서 컬럼을 삭제할 수 있다.
del frame[열]

중첩된 사전을 dataframe에 넘기면 바깥에 있는 사전의 키는 컬럼이 되고 안에 있는 키는 로우가 된다.

pop = {'Nevada': {2001: 2.4, 2002: 2.9},
'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}

frame3 = pd.DataFrame(pop)
하면 Necada와 Ohio는 컬럼 
2000~2002는 로우가 된다.
:  Nevada Ohio
2001 2.4 1.7
2002 2.9 3.6
2000 NaN 1.5

numpy와 비슷하게 전치가 된다.
frame.T

pop의 경우는 
pd.DataFrame(pop, index=[2001, 2002, 2003])
하면
: Nevada Ohio
2001 2.4 1.7
2002 2.9 3.6
2003 NaN NaN

index.name 
columns.name
으로 이름지정가능

pdata = {'Ohio': frame3['Ohio'][:-1],
'Nevada': frame3['Nevada'][:2]}
처럼 슬라이스 가능하다
: Ohio Nevada
2001 1.7 2.4
2002 3.6 2.9

frame.values
로 값만 2차원 배열로 가져올 수 있다.


@색인 객체
표 형식의 데이터에서 각 행과 열에 대한 이름과 다른 메타데이터를 저장하는 객체

obj = pd.Series(range(3), index=['a', 'b', 'c'])
index = obj.index
이렇게 하고 
index를 출력하면 ['a',';b','c']로 나온다.
index는 변경이 불가능하다.
index[1] = 'd'하면 오류가 난다.

판다스는 집합과 달리 인덱스 중복값을 허용한다.

obj2 = obj.reindex(리스트) 
인덱스를 재 정렬한다. 만약 없는 인덱스면 추가해준다.

시계열 같은 순차적인 데이터 재색인 할 때
값을 보간하거나 채워넣어야 할 경우 method옵션을 이용해 이를 가능하며
ffill을 주면 누락된 값을 직전 값으로 채워준다.
obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])
obj3
obj3.reindex(range(6), method='ffill')

0 blue
1 blue
2 purple
3 purple
4 yellow
5 yellow

reindex는 인덱스와 컬럼 둘다 변경 가능하다.

frame2 = frame.reindex(리스트)하면 인덱스값이
frame2 = frame.reindex(columns = 리스트)
하면 컬럼이 바뀜

하나의 로우나 컬럼 삭제하기.
new_obj = obj.drop('c')
하면 c행을 삭제한다.

여러개 삭제시
obj.drop(['d','c'], axis=0)

열삭제
data.drop(열 이름, axis=1)
data.drop([열1, 열2], axis='columns')
axis는 저렇게 둘다 사용 가능하다.


색인하기, 선택하기, 거르기
인덱스 이름을 바꿔도 기본적으로 숫자의 인덱스로 접근이 가능하다.
obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
display(obj)
obj['b'] 1.0
obj[1] 1.0
obj[2:4] 2.0 3.0
obj[['b', 'a', 'd']] 1.0 0.0 4.0
obj[[1, 3]] 1.0 3.0
obj[obj < 2] 0.0 1.0

슬라이싱시 주의할점은 
인덱스를 라벨 이름으로 하면 시작뿐만 아니라 끝점도 포함을 한다.

obj['b':'c']
하면 b인 1.0 뿐만아니라 c 2.0도 포함된다.
프레임에서 컬럼 슬라이스 역시 동일


loc과 iloc
    one two three four
Ohio 0 0 0 0
Colorado 0 5 6 7
Utah 8 9 10 11
New York 12 13 14 15
다음의 data가 있을 때
data.loc['Colorado', ['two', 'three']]
two 5
three 6
Name: Colorado, dtype: int64

iloc은 인덱스 로케이션으로 인덱스로 접근
data.iloc[2, [3, 0, 1]]
four 11
one 8
two 9

data.iloc[:, :3][data.three > 5]
 one two three
Colorado 0 5 6
Utah 8 9 10
New York 12 13 14


정수색인
만약 시리즈 ser 인덱스가 0,1,2를 가지고 잇고 
ser[-1]을 쓰면 마지막의 값을 원하는지 아니면 인덱스 자체가 -1인 건지 알 수 없기 때문에 오류가 난다.

그래서 index값을 a,b,c로 바꿔주면 -1로 접근이 가능하다.









